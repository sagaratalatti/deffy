/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VaultInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_SIGNERS"
      | "MIN_SIGNATURES"
      | "PROPOSAL_DURATION"
      | "addSigner"
      | "approveSpendingProposal"
      | "authorizedSigners"
      | "createSpendingProposal"
      | "daoAddress"
      | "depositETH"
      | "depositToken"
      | "emergencyPause"
      | "executeSpendingProposal"
      | "getBalance"
      | "getSigners"
      | "getSpendingProposal"
      | "getSupportedTokens"
      | "owner"
      | "paused"
      | "removeSigner"
      | "renounceOwnership"
      | "requiredSignatures"
      | "signerList"
      | "spendingProposalCount"
      | "spendingProposals"
      | "supportedTokens"
      | "tokenBalances"
      | "transferOwnership"
      | "unpause"
      | "updateRequiredSignatures"
      | "updateWithdrawalLimit"
      | "withdraw"
      | "withdrawalLimit"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "EmergencyPause"
      | "OwnershipTransferred"
      | "Paused"
      | "SignerAdded"
      | "SignerRemoved"
      | "SpendingProposalApproved"
      | "SpendingProposalCreated"
      | "SpendingProposalExecuted"
      | "Unpaused"
      | "Withdrawal"
      | "WithdrawalLimitUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_SIGNERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_SIGNATURES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PROPOSAL_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approveSpendingProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedSigners",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createSpendingProposal",
    values: [AddressLike, BigNumberish, AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "daoAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositToken",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSpendingProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSigners",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSpendingProposal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedTokens",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signerList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spendingProposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spendingProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateRequiredSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawalLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalLimit",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_SIGNERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_SIGNATURES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PROPOSAL_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveSpendingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedSigners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSpendingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeSpendingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSigners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSpendingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signerList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "spendingProposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spendingProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalLimit",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    token: AddressLike,
    depositor: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, depositor: string, amount: bigint];
  export interface OutputObject {
    token: string;
    depositor: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EmergencyPauseEvent {
  export type InputTuple = [pauser: AddressLike, reason: string];
  export type OutputTuple = [pauser: string, reason: string];
  export interface OutputObject {
    pauser: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerAddedEvent {
  export type InputTuple = [signer: AddressLike, addedBy: AddressLike];
  export type OutputTuple = [signer: string, addedBy: string];
  export interface OutputObject {
    signer: string;
    addedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerRemovedEvent {
  export type InputTuple = [signer: AddressLike, removedBy: AddressLike];
  export type OutputTuple = [signer: string, removedBy: string];
  export interface OutputObject {
    signer: string;
    removedBy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendingProposalApprovedEvent {
  export type InputTuple = [proposalId: BigNumberish, approver: AddressLike];
  export type OutputTuple = [proposalId: bigint, approver: string];
  export interface OutputObject {
    proposalId: bigint;
    approver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendingProposalCreatedEvent {
  export type InputTuple = [
    proposalId: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [
    proposalId: bigint,
    token: string,
    amount: bigint,
    recipient: string
  ];
  export interface OutputObject {
    proposalId: bigint;
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpendingProposalExecutedEvent {
  export type InputTuple = [proposalId: BigNumberish, success: boolean];
  export type OutputTuple = [proposalId: bigint, success: boolean];
  export interface OutputObject {
    proposalId: bigint;
    success: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    token: AddressLike,
    recipient: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, recipient: string, amount: bigint];
  export interface OutputObject {
    token: string;
    recipient: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalLimitUpdatedEvent {
  export type InputTuple = [oldLimit: BigNumberish, newLimit: BigNumberish];
  export type OutputTuple = [oldLimit: bigint, newLimit: bigint];
  export interface OutputObject {
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vault extends BaseContract {
  connect(runner?: ContractRunner | null): Vault;
  waitForDeployment(): Promise<this>;

  interface: VaultInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_SIGNERS: TypedContractMethod<[], [bigint], "view">;

  MIN_SIGNATURES: TypedContractMethod<[], [bigint], "view">;

  PROPOSAL_DURATION: TypedContractMethod<[], [bigint], "view">;

  addSigner: TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;

  approveSpendingProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  authorizedSigners: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  createSpendingProposal: TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;

  daoAddress: TypedContractMethod<[], [string], "view">;

  depositETH: TypedContractMethod<[], [void], "payable">;

  depositToken: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[reason: string], [void], "nonpayable">;

  executeSpendingProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  getSigners: TypedContractMethod<[], [string[]], "view">;

  getSpendingProposal: TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, string, bigint, string, string, bigint, bigint, boolean] & {
        id: bigint;
        token: string;
        amount: bigint;
        recipient: string;
        description: string;
        approvals: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  getSupportedTokens: TypedContractMethod<[], [string[]], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeSigner: TypedContractMethod<
    [signer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  requiredSignatures: TypedContractMethod<[], [bigint], "view">;

  signerList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  spendingProposalCount: TypedContractMethod<[], [bigint], "view">;

  spendingProposals: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, string, bigint, bigint, boolean] & {
        id: bigint;
        token: string;
        amount: bigint;
        recipient: string;
        description: string;
        approvals: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;

  supportedTokens: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  tokenBalances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateRequiredSignatures: TypedContractMethod<
    [newRequiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateWithdrawalLimit: TypedContractMethod<
    [newLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawalLimit: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_SIGNERS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_SIGNATURES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PROPOSAL_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addSigner"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "approveSpendingProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedSigners"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createSpendingProposal"
  ): TypedContractMethod<
    [
      token: AddressLike,
      amount: BigNumberish,
      recipient: AddressLike,
      description: string
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositETH"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "depositToken"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[reason: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeSpendingProposal"
  ): TypedContractMethod<[proposalId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSigners"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getSpendingProposal"
  ): TypedContractMethod<
    [proposalId: BigNumberish],
    [
      [bigint, string, bigint, string, string, bigint, bigint, boolean] & {
        id: bigint;
        token: string;
        amount: bigint;
        recipient: string;
        description: string;
        approvals: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedTokens"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeSigner"
  ): TypedContractMethod<[signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "signerList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "spendingProposalCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "spendingProposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, string, bigint, bigint, boolean] & {
        id: bigint;
        token: string;
        amount: bigint;
        recipient: string;
        description: string;
        approvals: bigint;
        deadline: bigint;
        executed: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportedTokens"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "tokenBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRequiredSignatures"
  ): TypedContractMethod<
    [newRequiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWithdrawalLimit"
  ): TypedContractMethod<[newLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawalLimit"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "EmergencyPause"
  ): TypedContractEvent<
    EmergencyPauseEvent.InputTuple,
    EmergencyPauseEvent.OutputTuple,
    EmergencyPauseEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "SignerAdded"
  ): TypedContractEvent<
    SignerAddedEvent.InputTuple,
    SignerAddedEvent.OutputTuple,
    SignerAddedEvent.OutputObject
  >;
  getEvent(
    key: "SignerRemoved"
  ): TypedContractEvent<
    SignerRemovedEvent.InputTuple,
    SignerRemovedEvent.OutputTuple,
    SignerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "SpendingProposalApproved"
  ): TypedContractEvent<
    SpendingProposalApprovedEvent.InputTuple,
    SpendingProposalApprovedEvent.OutputTuple,
    SpendingProposalApprovedEvent.OutputObject
  >;
  getEvent(
    key: "SpendingProposalCreated"
  ): TypedContractEvent<
    SpendingProposalCreatedEvent.InputTuple,
    SpendingProposalCreatedEvent.OutputTuple,
    SpendingProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "SpendingProposalExecuted"
  ): TypedContractEvent<
    SpendingProposalExecutedEvent.InputTuple,
    SpendingProposalExecutedEvent.OutputTuple,
    SpendingProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalLimitUpdated"
  ): TypedContractEvent<
    WithdrawalLimitUpdatedEvent.InputTuple,
    WithdrawalLimitUpdatedEvent.OutputTuple,
    WithdrawalLimitUpdatedEvent.OutputObject
  >;

  filters: {
    "Deposit(address,address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "EmergencyPause(address,string)": TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;
    EmergencyPause: TypedContractEvent<
      EmergencyPauseEvent.InputTuple,
      EmergencyPauseEvent.OutputTuple,
      EmergencyPauseEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "SignerAdded(address,address)": TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;
    SignerAdded: TypedContractEvent<
      SignerAddedEvent.InputTuple,
      SignerAddedEvent.OutputTuple,
      SignerAddedEvent.OutputObject
    >;

    "SignerRemoved(address,address)": TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;
    SignerRemoved: TypedContractEvent<
      SignerRemovedEvent.InputTuple,
      SignerRemovedEvent.OutputTuple,
      SignerRemovedEvent.OutputObject
    >;

    "SpendingProposalApproved(uint256,address)": TypedContractEvent<
      SpendingProposalApprovedEvent.InputTuple,
      SpendingProposalApprovedEvent.OutputTuple,
      SpendingProposalApprovedEvent.OutputObject
    >;
    SpendingProposalApproved: TypedContractEvent<
      SpendingProposalApprovedEvent.InputTuple,
      SpendingProposalApprovedEvent.OutputTuple,
      SpendingProposalApprovedEvent.OutputObject
    >;

    "SpendingProposalCreated(uint256,address,uint256,address)": TypedContractEvent<
      SpendingProposalCreatedEvent.InputTuple,
      SpendingProposalCreatedEvent.OutputTuple,
      SpendingProposalCreatedEvent.OutputObject
    >;
    SpendingProposalCreated: TypedContractEvent<
      SpendingProposalCreatedEvent.InputTuple,
      SpendingProposalCreatedEvent.OutputTuple,
      SpendingProposalCreatedEvent.OutputObject
    >;

    "SpendingProposalExecuted(uint256,bool)": TypedContractEvent<
      SpendingProposalExecutedEvent.InputTuple,
      SpendingProposalExecutedEvent.OutputTuple,
      SpendingProposalExecutedEvent.OutputObject
    >;
    SpendingProposalExecuted: TypedContractEvent<
      SpendingProposalExecutedEvent.InputTuple,
      SpendingProposalExecutedEvent.OutputTuple,
      SpendingProposalExecutedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Withdrawal(address,address,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;

    "WithdrawalLimitUpdated(uint256,uint256)": TypedContractEvent<
      WithdrawalLimitUpdatedEvent.InputTuple,
      WithdrawalLimitUpdatedEvent.OutputTuple,
      WithdrawalLimitUpdatedEvent.OutputObject
    >;
    WithdrawalLimitUpdated: TypedContractEvent<
      WithdrawalLimitUpdatedEvent.InputTuple,
      WithdrawalLimitUpdatedEvent.OutputTuple,
      WithdrawalLimitUpdatedEvent.OutputObject
    >;
  };
}
