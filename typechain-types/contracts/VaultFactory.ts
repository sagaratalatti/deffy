/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface VaultFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_REQUIRED_SIGNATURES"
      | "MAX_VAULTS_PER_DAO"
      | "MAX_WITHDRAWAL_LIMIT"
      | "MIN_REQUIRED_SIGNATURES"
      | "MIN_WITHDRAWAL_LIMIT"
      | "allVaults"
      | "createDefaultVault"
      | "createVault"
      | "createVaultWithCustomParams"
      | "daoVaults"
      | "defaultRequiredSignatures"
      | "defaultWithdrawalLimit"
      | "emergencyRemoveVault"
      | "getAllVaults"
      | "getDAOVaultCount"
      | "getDAOVaults"
      | "getFactoryStats"
      | "getVaultDAO"
      | "isVaultFromFactory"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateDefaultParameters"
      | "updateDefaultRequiredSignatures"
      | "updateDefaultWithdrawalLimit"
      | "vaultCount"
      | "vaultToDAO"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DefaultParametersUpdated"
      | "OwnershipTransferred"
      | "VaultCreated"
      | "VaultTemplateUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_REQUIRED_SIGNATURES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_VAULTS_PER_DAO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_WITHDRAWAL_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REQUIRED_SIGNATURES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_WITHDRAWAL_LIMIT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allVaults",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createDefaultVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createVaultWithCustomParams",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "daoVaults",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultRequiredSignatures",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defaultWithdrawalLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRemoveVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllVaults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOVaultCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDAO",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isVaultFromFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultParameters",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultRequiredSignatures",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDefaultWithdrawalLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultToDAO",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_REQUIRED_SIGNATURES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_VAULTS_PER_DAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_WITHDRAWAL_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REQUIRED_SIGNATURES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_WITHDRAWAL_LIMIT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createDefaultVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVaultWithCustomParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "daoVaults", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "defaultRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRemoveVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAOVaultCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDAOVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isVaultFromFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultRequiredSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDefaultWithdrawalLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultToDAO", data: BytesLike): Result;
}

export namespace DefaultParametersUpdatedEvent {
  export type InputTuple = [
    withdrawalLimit: BigNumberish,
    requiredSignatures: BigNumberish
  ];
  export type OutputTuple = [
    withdrawalLimit: bigint,
    requiredSignatures: bigint
  ];
  export interface OutputObject {
    withdrawalLimit: bigint;
    requiredSignatures: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultCreatedEvent {
  export type InputTuple = [
    vaultAddress: AddressLike,
    daoAddress: AddressLike,
    creator: AddressLike,
    withdrawalLimit: BigNumberish,
    requiredSignatures: BigNumberish
  ];
  export type OutputTuple = [
    vaultAddress: string,
    daoAddress: string,
    creator: string,
    withdrawalLimit: bigint,
    requiredSignatures: bigint
  ];
  export interface OutputObject {
    vaultAddress: string;
    daoAddress: string;
    creator: string;
    withdrawalLimit: bigint;
    requiredSignatures: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultTemplateUpdatedEvent {
  export type InputTuple = [oldTemplate: AddressLike, newTemplate: AddressLike];
  export type OutputTuple = [oldTemplate: string, newTemplate: string];
  export interface OutputObject {
    oldTemplate: string;
    newTemplate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VaultFactory extends BaseContract {
  connect(runner?: ContractRunner | null): VaultFactory;
  waitForDeployment(): Promise<this>;

  interface: VaultFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_REQUIRED_SIGNATURES: TypedContractMethod<[], [bigint], "view">;

  MAX_VAULTS_PER_DAO: TypedContractMethod<[], [bigint], "view">;

  MAX_WITHDRAWAL_LIMIT: TypedContractMethod<[], [bigint], "view">;

  MIN_REQUIRED_SIGNATURES: TypedContractMethod<[], [bigint], "view">;

  MIN_WITHDRAWAL_LIMIT: TypedContractMethod<[], [bigint], "view">;

  allVaults: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createDefaultVault: TypedContractMethod<
    [daoAddress: AddressLike],
    [string],
    "nonpayable"
  >;

  createVault: TypedContractMethod<
    [daoAddress: AddressLike, withdrawalLimit: BigNumberish],
    [string],
    "nonpayable"
  >;

  createVaultWithCustomParams: TypedContractMethod<
    [
      daoAddress: AddressLike,
      withdrawalLimit: BigNumberish,
      requiredSignatures: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  daoVaults: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  defaultRequiredSignatures: TypedContractMethod<[], [bigint], "view">;

  defaultWithdrawalLimit: TypedContractMethod<[], [bigint], "view">;

  emergencyRemoveVault: TypedContractMethod<
    [vaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllVaults: TypedContractMethod<[], [string[]], "view">;

  getDAOVaultCount: TypedContractMethod<
    [daoAddress: AddressLike],
    [bigint],
    "view"
  >;

  getDAOVaults: TypedContractMethod<
    [daoAddress: AddressLike],
    [string[]],
    "view"
  >;

  getFactoryStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalVaults: bigint;
        totalDAOsWithVaults: bigint;
        averageVaultsPerDAO: bigint;
      }
    ],
    "view"
  >;

  getVaultDAO: TypedContractMethod<
    [vaultAddress: AddressLike],
    [string],
    "view"
  >;

  isVaultFromFactory: TypedContractMethod<
    [vaultAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDefaultParameters: TypedContractMethod<
    [newWithdrawalLimit: BigNumberish, newRequiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDefaultRequiredSignatures: TypedContractMethod<
    [newRequiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateDefaultWithdrawalLimit: TypedContractMethod<
    [newWithdrawalLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  vaultCount: TypedContractMethod<[], [bigint], "view">;

  vaultToDAO: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_REQUIRED_SIGNATURES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_VAULTS_PER_DAO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_WITHDRAWAL_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REQUIRED_SIGNATURES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_WITHDRAWAL_LIMIT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allVaults"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createDefaultVault"
  ): TypedContractMethod<[daoAddress: AddressLike], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "createVault"
  ): TypedContractMethod<
    [daoAddress: AddressLike, withdrawalLimit: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createVaultWithCustomParams"
  ): TypedContractMethod<
    [
      daoAddress: AddressLike,
      withdrawalLimit: BigNumberish,
      requiredSignatures: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "daoVaults"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "defaultRequiredSignatures"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultWithdrawalLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencyRemoveVault"
  ): TypedContractMethod<[vaultAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllVaults"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDAOVaultCount"
  ): TypedContractMethod<[daoAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDAOVaults"
  ): TypedContractMethod<[daoAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getFactoryStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalVaults: bigint;
        totalDAOsWithVaults: bigint;
        averageVaultsPerDAO: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultDAO"
  ): TypedContractMethod<[vaultAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "isVaultFromFactory"
  ): TypedContractMethod<[vaultAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDefaultParameters"
  ): TypedContractMethod<
    [newWithdrawalLimit: BigNumberish, newRequiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDefaultRequiredSignatures"
  ): TypedContractMethod<
    [newRequiredSignatures: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateDefaultWithdrawalLimit"
  ): TypedContractMethod<
    [newWithdrawalLimit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vaultToDAO"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "DefaultParametersUpdated"
  ): TypedContractEvent<
    DefaultParametersUpdatedEvent.InputTuple,
    DefaultParametersUpdatedEvent.OutputTuple,
    DefaultParametersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "VaultCreated"
  ): TypedContractEvent<
    VaultCreatedEvent.InputTuple,
    VaultCreatedEvent.OutputTuple,
    VaultCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VaultTemplateUpdated"
  ): TypedContractEvent<
    VaultTemplateUpdatedEvent.InputTuple,
    VaultTemplateUpdatedEvent.OutputTuple,
    VaultTemplateUpdatedEvent.OutputObject
  >;

  filters: {
    "DefaultParametersUpdated(uint256,uint256)": TypedContractEvent<
      DefaultParametersUpdatedEvent.InputTuple,
      DefaultParametersUpdatedEvent.OutputTuple,
      DefaultParametersUpdatedEvent.OutputObject
    >;
    DefaultParametersUpdated: TypedContractEvent<
      DefaultParametersUpdatedEvent.InputTuple,
      DefaultParametersUpdatedEvent.OutputTuple,
      DefaultParametersUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "VaultCreated(address,address,address,uint256,uint256)": TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;
    VaultCreated: TypedContractEvent<
      VaultCreatedEvent.InputTuple,
      VaultCreatedEvent.OutputTuple,
      VaultCreatedEvent.OutputObject
    >;

    "VaultTemplateUpdated(address,address)": TypedContractEvent<
      VaultTemplateUpdatedEvent.InputTuple,
      VaultTemplateUpdatedEvent.OutputTuple,
      VaultTemplateUpdatedEvent.OutputObject
    >;
    VaultTemplateUpdated: TypedContractEvent<
      VaultTemplateUpdatedEvent.InputTuple,
      VaultTemplateUpdatedEvent.OutputTuple,
      VaultTemplateUpdatedEvent.OutputObject
    >;
  };
}
