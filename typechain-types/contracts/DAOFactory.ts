/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface DAOFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_DAOS_PER_USER"
      | "allDAOs"
      | "createDAO"
      | "daoCount"
      | "daoToVault"
      | "emergencyRemoveDAO"
      | "getAllDAOs"
      | "getDAOVault"
      | "getUserDAOs"
      | "getVaultDAO"
      | "owner"
      | "pause"
      | "paused"
      | "registerVault"
      | "renounceOwnership"
      | "transferOwnership"
      | "unpause"
      | "unregisterVault"
      | "userDAOs"
      | "vaultToDAO"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DAOCreated"
      | "OwnershipTransferred"
      | "Paused"
      | "Unpaused"
      | "VaultRegistered"
      | "VaultUnregistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_DAOS_PER_USER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allDAOs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "createDAO", values: [string]): string;
  encodeFunctionData(functionFragment: "daoCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daoToVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyRemoveDAO",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllDAOs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDAOVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDAOs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultDAO",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unregisterVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userDAOs",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultToDAO",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_DAOS_PER_USER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allDAOs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createDAO", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "daoToVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyRemoveDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAllDAOs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDAOVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDAOs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultDAO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unregisterVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userDAOs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaultToDAO", data: BytesLike): Result;
}

export namespace DAOCreatedEvent {
  export type InputTuple = [
    daoAddress: AddressLike,
    creator: AddressLike,
    name: string
  ];
  export type OutputTuple = [daoAddress: string, creator: string, name: string];
  export interface OutputObject {
    daoAddress: string;
    creator: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRegisteredEvent {
  export type InputTuple = [daoAddress: AddressLike, vaultAddress: AddressLike];
  export type OutputTuple = [daoAddress: string, vaultAddress: string];
  export interface OutputObject {
    daoAddress: string;
    vaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultUnregisteredEvent {
  export type InputTuple = [daoAddress: AddressLike, vaultAddress: AddressLike];
  export type OutputTuple = [daoAddress: string, vaultAddress: string];
  export interface OutputObject {
    daoAddress: string;
    vaultAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DAOFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DAOFactory;
  waitForDeployment(): Promise<this>;

  interface: DAOFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_DAOS_PER_USER: TypedContractMethod<[], [bigint], "view">;

  allDAOs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  createDAO: TypedContractMethod<[name: string], [string], "nonpayable">;

  daoCount: TypedContractMethod<[], [bigint], "view">;

  daoToVault: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  emergencyRemoveDAO: TypedContractMethod<
    [daoAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getAllDAOs: TypedContractMethod<[], [string[]], "view">;

  getDAOVault: TypedContractMethod<[daoAddress: AddressLike], [string], "view">;

  getUserDAOs: TypedContractMethod<[user: AddressLike], [string[]], "view">;

  getVaultDAO: TypedContractMethod<
    [vaultAddress: AddressLike],
    [string],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerVault: TypedContractMethod<
    [daoAddress: AddressLike, vaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  unregisterVault: TypedContractMethod<
    [daoAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  userDAOs: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  vaultToDAO: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_DAOS_PER_USER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "allDAOs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "createDAO"
  ): TypedContractMethod<[name: string], [string], "nonpayable">;
  getFunction(
    nameOrSignature: "daoCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "daoToVault"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "emergencyRemoveDAO"
  ): TypedContractMethod<[daoAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllDAOs"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getDAOVault"
  ): TypedContractMethod<[daoAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getUserDAOs"
  ): TypedContractMethod<[user: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVaultDAO"
  ): TypedContractMethod<[vaultAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerVault"
  ): TypedContractMethod<
    [daoAddress: AddressLike, vaultAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unregisterVault"
  ): TypedContractMethod<[daoAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "userDAOs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "vaultToDAO"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getEvent(
    key: "DAOCreated"
  ): TypedContractEvent<
    DAOCreatedEvent.InputTuple,
    DAOCreatedEvent.OutputTuple,
    DAOCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VaultRegistered"
  ): TypedContractEvent<
    VaultRegisteredEvent.InputTuple,
    VaultRegisteredEvent.OutputTuple,
    VaultRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VaultUnregistered"
  ): TypedContractEvent<
    VaultUnregisteredEvent.InputTuple,
    VaultUnregisteredEvent.OutputTuple,
    VaultUnregisteredEvent.OutputObject
  >;

  filters: {
    "DAOCreated(address,address,string)": TypedContractEvent<
      DAOCreatedEvent.InputTuple,
      DAOCreatedEvent.OutputTuple,
      DAOCreatedEvent.OutputObject
    >;
    DAOCreated: TypedContractEvent<
      DAOCreatedEvent.InputTuple,
      DAOCreatedEvent.OutputTuple,
      DAOCreatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VaultRegistered(address,address)": TypedContractEvent<
      VaultRegisteredEvent.InputTuple,
      VaultRegisteredEvent.OutputTuple,
      VaultRegisteredEvent.OutputObject
    >;
    VaultRegistered: TypedContractEvent<
      VaultRegisteredEvent.InputTuple,
      VaultRegisteredEvent.OutputTuple,
      VaultRegisteredEvent.OutputObject
    >;

    "VaultUnregistered(address,address)": TypedContractEvent<
      VaultUnregisteredEvent.InputTuple,
      VaultUnregisteredEvent.OutputTuple,
      VaultUnregisteredEvent.OutputObject
    >;
    VaultUnregistered: TypedContractEvent<
      VaultUnregisteredEvent.InputTuple,
      VaultUnregisteredEvent.OutputTuple,
      VaultUnregisteredEvent.OutputObject
    >;
  };
}
